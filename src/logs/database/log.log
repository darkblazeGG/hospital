[2023-09-15T16:19:00.588+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.596+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.605+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.608+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.612+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.614+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.618+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.621+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.626+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.630+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Расписание' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:00.654+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Расписание' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:00.665+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" DROP CONSTRAINT "Расписание_doctor_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.671+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Расписание"  ADD FOREIGN KEY ("doctor_id") REFERENCES "Врачи" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.678+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "Дата" SET NOT NULL;ALTER TABLE "Расписание" ALTER COLUMN "Дата" DROP DEFAULT;ALTER TABLE "Расписание" ALTER COLUMN "Дата" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.681+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.683+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.686+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Записи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:00.687+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Записи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:00.706+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" DROP CONSTRAINT "Записи_schedule_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.711+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "schedule_id" SET NOT NULL;ALTER TABLE "Записи"  ADD FOREIGN KEY ("schedule_id") REFERENCES "Расписание" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.716+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.717+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "user_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.719+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время записи" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время записи" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время записи" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.721+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.723+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.728+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.733+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Врачи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:00.734+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Врачи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:00.751+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" DROP DEFAULT;ALTER TABLE "Врачи"  ADD UNIQUE ("ФИО врача");ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.828+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" DROP DEFAULT;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" TYPE VARCHAR(128); {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.830+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:00.834+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:00.836+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Пациенты' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:00.837+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Пациенты' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:00.849+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Номер телефона пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" TYPE VARCHAR(16)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:00.922+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("ФИО пациента");ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:01.013+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Почтовый адрес пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:01.126+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:15.973+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:15.981+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:15.990+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:15.992+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:15.996+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:15.999+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:16.003+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:16.005+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:16.011+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:16.015+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Расписание' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:16.039+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Расписание' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:16.050+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" DROP CONSTRAINT "Расписание_doctor_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.055+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Расписание"  ADD FOREIGN KEY ("doctor_id") REFERENCES "Врачи" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.063+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "Дата" SET NOT NULL;ALTER TABLE "Расписание" ALTER COLUMN "Дата" DROP DEFAULT;ALTER TABLE "Расписание" ALTER COLUMN "Дата" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.065+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:16.068+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:16.070+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Записи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:16.071+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Записи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:16.091+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" DROP CONSTRAINT "Записи_schedule_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.095+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "schedule_id" SET NOT NULL;ALTER TABLE "Записи"  ADD FOREIGN KEY ("schedule_id") REFERENCES "Расписание" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.100+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.102+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "user_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.104+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время записи" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время записи" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время записи" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.106+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.107+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:16.112+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:16.117+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Врачи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:16.118+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Врачи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:16.137+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" DROP DEFAULT;ALTER TABLE "Врачи"  ADD UNIQUE ("ФИО врача");ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.179+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" DROP DEFAULT;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" TYPE VARCHAR(128); {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.181+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:19:16.185+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:19:16.188+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Пациенты' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:19:16.188+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Пациенты' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:19:16.201+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Номер телефона пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" TYPE VARCHAR(16)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.264+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("ФИО пациента");ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.378+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Почтовый адрес пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:19:16.446+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.316+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.323+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.331+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.333+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.336+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.339+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.342+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.344+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.350+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.353+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Расписание' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:01.376+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Расписание' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:01.388+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" DROP CONSTRAINT "Расписание_doctor_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.394+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Расписание"  ADD FOREIGN KEY ("doctor_id") REFERENCES "Врачи" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.418+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "Дата" SET NOT NULL;ALTER TABLE "Расписание" ALTER COLUMN "Дата" DROP DEFAULT;ALTER TABLE "Расписание" ALTER COLUMN "Дата" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.419+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.422+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.423+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Записи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:01.435+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Записи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:01.445+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" DROP CONSTRAINT "Записи_schedule_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.446+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "schedule_id" SET NOT NULL;ALTER TABLE "Записи"  ADD FOREIGN KEY ("schedule_id") REFERENCES "Расписание" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.459+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.460+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "user_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.461+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время записи" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время записи" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время записи" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.462+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.463+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.465+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.468+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Врачи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:01.476+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Врачи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:01.495+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" DROP DEFAULT;ALTER TABLE "Врачи"  ADD UNIQUE ("ФИО врача");ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.611+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" DROP DEFAULT;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" TYPE VARCHAR(128); {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.616+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:01.630+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:01.640+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Пациенты' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:01.641+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Пациенты' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:01.674+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Номер телефона пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" TYPE VARCHAR(16)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.804+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("ФИО пациента");ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.881+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Почтовый адрес пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:01.969+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.462+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.469+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.477+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.479+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.482+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.483+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.487+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.489+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: false,
  withoutForeignKeyConstraints: true,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.495+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Расписание' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.498+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Расписание' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:28.520+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Расписание' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:28.531+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" DROP CONSTRAINT "Расписание_doctor_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.536+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Расписание"  ADD FOREIGN KEY ("doctor_id") REFERENCES "Врачи" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.544+07:00] [INFO] database - Executing (default): ALTER TABLE "Расписание" ALTER COLUMN "Дата" SET NOT NULL;ALTER TABLE "Расписание" ALTER COLUMN "Дата" DROP DEFAULT;ALTER TABLE "Расписание" ALTER COLUMN "Дата" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.545+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Расписание' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Расписаниеs', singular: 'Расписание' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.547+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Записи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.549+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Записи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:28.559+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Записи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:28.569+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" DROP CONSTRAINT "Записи_schedule_id_fkey" {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.570+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "schedule_id" SET NOT NULL;ALTER TABLE "Записи"  ADD FOREIGN KEY ("schedule_id") REFERENCES "Расписание" ("id") ON DELETE CASCADE ON UPDATE CASCADE; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.573+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "doctor_id" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "doctor_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.574+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "user_id" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "user_id" TYPE UUID; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.575+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время записи" SET NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время записи" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время записи" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.577+07:00] [INFO] database - Executing (default): ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP NOT NULL;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" DROP DEFAULT;ALTER TABLE "Записи" ALTER COLUMN "Время рассылки" TYPE TIMESTAMP; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.578+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Записи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Записиs', singular: 'Записи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.579+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Врачи' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.581+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Врачи' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:28.593+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Врачи' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:28.600+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" DROP DEFAULT;ALTER TABLE "Врачи"  ADD UNIQUE ("ФИО врача");ALTER TABLE "Врачи" ALTER COLUMN "ФИО врача" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.636+07:00] [INFO] database - Executing (default): ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" SET NOT NULL;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" DROP DEFAULT;ALTER TABLE "Врачи" ALTER COLUMN "Специальность врача" TYPE VARCHAR(128); {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.637+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Врачи' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Врачиs', singular: 'Врачи' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
[2023-09-15T16:22:28.640+07:00] [INFO] database - Executing (default): SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'Пациенты' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWTABLES'
}
[2023-09-15T16:22:28.642+07:00] [INFO] database - Executing (default): SELECT pk.constraint_type as "Constraint",c.column_name as "Field", c.column_default as "Default",c.is_nullable as "Null", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as "Type", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS "special", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS "Comment" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = 'Пациенты' AND c.table_schema = 'public' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'DESCRIBE'
}
[2023-09-15T16:22:28.643+07:00] [INFO] database - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'Пациенты' AND tc.table_catalog = 'Hospital' {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'FOREIGNKEYS'
}
[2023-09-15T16:22:28.659+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Номер телефона пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Номер телефона пациента" TYPE VARCHAR(16)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.741+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("ФИО пациента");ALTER TABLE "Пациенты" ALTER COLUMN "ФИО пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.816+07:00] [INFO] database - Executing (default): ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" SET NOT NULL;ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" DROP DEFAULT;ALTER TABLE "Пациенты"  ADD UNIQUE ("Почтовый адрес пациента");ALTER TABLE "Пациенты" ALTER COLUMN "Почтовый адрес пациента" TYPE VARCHAR(128)  ; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'RAW'
}
[2023-09-15T16:22:28.912+07:00] [INFO] database - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Пациенты' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname; {
  plain: false,
  raw: true,
  logging: [Function: bound ],
  timestamps: false,
  validate: {},
  freezeTableName: true,
  underscored: false,
  paranoid: false,
  rejectOnEmpty: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: {},
  scopes: {},
  indexes: [],
  whereMergeStrategy: 'overwrite',
  name: { plural: 'Пациентыs', singular: 'Пациенты' },
  omitNull: false,
  sequelize: <ref *1> Sequelize {
    options: {
      dialect: 'postgres',
      dialectModule: null,
      dialectModulePath: null,
      host: 'localhost',
      protocol: 'tcp',
      define: {},
      query: {},
      sync: {},
      timezone: '+00:00',
      standardConformingStrings: true,
      logging: [Function: log],
      omitNull: false,
      native: false,
      replication: false,
      ssl: undefined,
      pool: {},
      quoteIdentifiers: true,
      hooks: {},
      retry: [Object],
      transactionType: 'DEFERRED',
      isolationLevel: null,
      databaseVersion: '14.2.0',
      typeValidation: false,
      benchmark: false,
      minifyAliases: false,
      logQueryParameters: false,
      attributeBehavior: 'throw',
      port: 5432
    },
    config: {
      database: 'Hospital',
      username: 'doctor',
      password: '1234567890',
      host: 'localhost',
      port: 5432,
      pool: {},
      protocol: 'tcp',
      native: false,
      ssl: undefined,
      replication: false,
      dialectModule: null,
      dialectModulePath: null,
      keepDefaultTimezone: undefined,
      dialectOptions: undefined
    },
    dialect: PostgresDialect {
      sequelize: [Circular *1],
      connectionManager: [ConnectionManager],
      queryGenerator: [PostgresQueryGenerator],
      queryInterface: [PostgresQueryInterface]
    },
    queryInterface: PostgresQueryInterface {
      sequelize: [Circular *1],
      queryGenerator: [PostgresQueryGenerator]
    },
    models: {
      'Расписание': Расписание,
      'Записи': Записи,
      'Врачи': Врачи,
      'Пациенты': Пациенты
    },
    modelManager: ModelManager { models: [Array], sequelize: [Circular *1] },
    connectionManager: ConnectionManager {
      sequelize: [Circular *1],
      config: [Object],
      dialect: [PostgresDialect],
      versionPromise: null,
      dialectName: 'postgres',
      pool: [Pool],
      lib: [PG],
      nameOidMap: [Object],
      enumOids: [Object],
      oidParserMap: [Map]
    }
  },
  hooks: true,
  dialect: 'postgres',
  dialectModule: null,
  dialectModulePath: null,
  host: 'localhost',
  protocol: 'tcp',
  define: {},
  query: {},
  sync: {},
  timezone: '+00:00',
  standardConformingStrings: true,
  native: false,
  replication: false,
  ssl: undefined,
  pool: {},
  quoteIdentifiers: true,
  retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
  transactionType: 'DEFERRED',
  isolationLevel: null,
  databaseVersion: 0,
  typeValidation: false,
  benchmark: false,
  minifyAliases: false,
  logQueryParameters: false,
  attributeBehavior: 'throw',
  port: 5432,
  alter: true,
  force: false,
  type: 'SHOWINDEXES'
}
